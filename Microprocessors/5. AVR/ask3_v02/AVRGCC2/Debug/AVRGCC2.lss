
AVRGCC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  0000089c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000ba  00000000  00000000  00000967  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000005b  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028f  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000aa  00000000  00000000  00000d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000215  00000000  00000000  00000dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00000feb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
ï»¿#include <avr/io.h>

int main(){
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
	SP=RAMEND;
  70:	8f e5       	ldi	r24, 0x5F	; 95
  72:	94 e0       	ldi	r25, 0x04	; 4
  74:	9e bf       	out	0x3e, r25	; 62
  76:	8d bf       	out	0x3d, r24	; 61
	DDRB=0xFF;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	87 bb       	out	0x17, r24	; 23
	DDRD=0x00;
  7c:	11 ba       	out	0x11, r1	; 17
	
	int output=0x80;	// aristero LED anoixto
	PORTB=output;
  7e:	80 e8       	ldi	r24, 0x80	; 128
  80:	88 bb       	out	0x18, r24	; 24

	int input,prevnoe;
	input = PIND;
  82:	80 b3       	in	r24, 0x10	; 16
  84:	90 e0       	ldi	r25, 0x00	; 0
int main(){
	SP=RAMEND;
	DDRB=0xFF;
	DDRD=0x00;
	
	int output=0x80;	// aristero LED anoixto
  86:	40 e8       	ldi	r20, 0x80	; 128
  88:	50 e0       	ldi	r21, 0x00	; 0
			output = 0x01;
		else 
			output <<= 1;
	else if ((((prevnoe) & 0x01) == 1) && (((input) & 0x01) == 0))		// gia to SW0	
		if (output == 0x01)
			output = 0x80;
  8a:	60 e8       	ldi	r22, 0x80	; 128
  8c:	70 e0       	ldi	r23, 0x00	; 0
			output = 0x40;
		else 
			output >>= 2;
	else if ((((prevnoe >> 1) & 0x01) == 1) && (((input >> 1) & 0x01) == 0))	// gia to SW1	
		if (output == 0x80)
			output = 0x01;
  8e:	e1 e0       	ldi	r30, 0x01	; 1
  90:	f0 e0       	ldi	r31, 0x00	; 0
	input &= 0x1F;		// kratame ta 5 deksiotera psifia
	if ((prevnoe >> 4) == 1 && (input >> 4) == 0)	// gia to SW4
		output=0x80;
	else if ((((prevnoe >> 3) & 0x01) == 1) && (((input >> 3) & 0x01) == 0) )	// gia to SW3
		if (output==0x80) 
			output=0x02;
  92:	a2 e0       	ldi	r26, 0x02	; 2
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	68 c0       	rjmp	.+208    	; 0x168 <main+0xfc>
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
  98:	2f 71       	andi	r18, 0x1F	; 31
  9a:	30 70       	andi	r19, 0x00	; 0
	if ((prevnoe >> 4) == 1 && (input >> 4) == 0)	// gia to SW4
  9c:	ec 01       	movw	r28, r24
  9e:	d5 95       	asr	r29
  a0:	c7 95       	ror	r28
  a2:	d5 95       	asr	r29
  a4:	c7 95       	ror	r28
  a6:	d5 95       	asr	r29
  a8:	c7 95       	ror	r28
  aa:	d5 95       	asr	r29
  ac:	c7 95       	ror	r28
  ae:	c1 30       	cpi	r28, 0x01	; 1
  b0:	d1 05       	cpc	r29, r1
  b2:	59 f4       	brne	.+22     	; 0xca <main+0x5e>
  b4:	e9 01       	movw	r28, r18
  b6:	d5 95       	asr	r29
  b8:	c7 95       	ror	r28
  ba:	d5 95       	asr	r29
  bc:	c7 95       	ror	r28
  be:	d5 95       	asr	r29
  c0:	c7 95       	ror	r28
  c2:	d5 95       	asr	r29
  c4:	c7 95       	ror	r28
  c6:	20 97       	sbiw	r28, 0x00	; 0
  c8:	b1 f1       	breq	.+108    	; 0x136 <main+0xca>
		output=0x80;
	else if ((((prevnoe >> 3) & 0x01) == 1) && (((input >> 3) & 0x01) == 0) )	// gia to SW3
  ca:	83 ff       	sbrs	r24, 3
  cc:	0e c0       	rjmp	.+28     	; 0xea <main+0x7e>
  ce:	23 fd       	sbrc	r18, 3
  d0:	0c c0       	rjmp	.+24     	; 0xea <main+0x7e>
		if (output==0x80) 
  d2:	40 38       	cpi	r20, 0x80	; 128
  d4:	51 05       	cpc	r21, r1
  d6:	91 f1       	breq	.+100    	; 0x13c <main+0xd0>
			output=0x02;
		else if (output == 0x40)
  d8:	40 34       	cpi	r20, 0x40	; 64
  da:	51 05       	cpc	r21, r1
  dc:	91 f1       	breq	.+100    	; 0x142 <main+0xd6>
			output = 0x01;
		else 
			output <<= 2;
  de:	44 0f       	add	r20, r20
  e0:	55 1f       	adc	r21, r21
  e2:	44 0f       	add	r20, r20
  e4:	55 1f       	adc	r21, r21
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
  e6:	c9 01       	movw	r24, r18
  e8:	3f c0       	rjmp	.+126    	; 0x168 <main+0xfc>
			output=0x02;
		else if (output == 0x40)
			output = 0x01;
		else 
			output <<= 2;
	else if ((((prevnoe >> 2) & 0x01) == 1) && (((input >> 2) & 0x01) == 0))  	// gia to SW2
  ea:	82 ff       	sbrs	r24, 2
  ec:	0e c0       	rjmp	.+28     	; 0x10a <main+0x9e>
  ee:	22 fd       	sbrc	r18, 2
  f0:	0c c0       	rjmp	.+24     	; 0x10a <main+0x9e>
		if (output == 0x02)
  f2:	42 30       	cpi	r20, 0x02	; 2
  f4:	51 05       	cpc	r21, r1
  f6:	41 f1       	breq	.+80     	; 0x148 <main+0xdc>
			output = 0x80;
		else if (output == 0x01)
  f8:	41 30       	cpi	r20, 0x01	; 1
  fa:	51 05       	cpc	r21, r1
  fc:	41 f1       	breq	.+80     	; 0x14e <main+0xe2>
			output = 0x40;
		else 
			output >>= 2;
  fe:	55 95       	asr	r21
 100:	47 95       	ror	r20
 102:	55 95       	asr	r21
 104:	47 95       	ror	r20
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 106:	c9 01       	movw	r24, r18
 108:	2f c0       	rjmp	.+94     	; 0x168 <main+0xfc>
			output = 0x80;
		else if (output == 0x01)
			output = 0x40;
		else 
			output >>= 2;
	else if ((((prevnoe >> 1) & 0x01) == 1) && (((input >> 1) & 0x01) == 0))	// gia to SW1	
 10a:	81 ff       	sbrs	r24, 1
 10c:	09 c0       	rjmp	.+18     	; 0x120 <main+0xb4>
 10e:	21 fd       	sbrc	r18, 1
 110:	07 c0       	rjmp	.+14     	; 0x120 <main+0xb4>
		if (output == 0x80)
 112:	40 38       	cpi	r20, 0x80	; 128
 114:	51 05       	cpc	r21, r1
 116:	f9 f0       	breq	.+62     	; 0x156 <main+0xea>
			output = 0x01;
		else 
			output <<= 1;
 118:	44 0f       	add	r20, r20
 11a:	55 1f       	adc	r21, r21
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 11c:	c9 01       	movw	r24, r18
 11e:	24 c0       	rjmp	.+72     	; 0x168 <main+0xfc>
	else if ((((prevnoe >> 1) & 0x01) == 1) && (((input >> 1) & 0x01) == 0))	// gia to SW1	
		if (output == 0x80)
			output = 0x01;
		else 
			output <<= 1;
	else if ((((prevnoe) & 0x01) == 1) && (((input) & 0x01) == 0))		// gia to SW0	
 120:	80 ff       	sbrs	r24, 0
 122:	1c c0       	rjmp	.+56     	; 0x15c <main+0xf0>
 124:	20 fd       	sbrc	r18, 0
 126:	1c c0       	rjmp	.+56     	; 0x160 <main+0xf4>
		if (output == 0x01)
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	51 05       	cpc	r21, r1
 12c:	d9 f0       	breq	.+54     	; 0x164 <main+0xf8>
			output = 0x80;
		else 
	
			output >>= 1;
 12e:	55 95       	asr	r21
 130:	47 95       	ror	r20
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 132:	c9 01       	movw	r24, r18
 134:	19 c0       	rjmp	.+50     	; 0x168 <main+0xfc>
 136:	c9 01       	movw	r24, r18
	if ((prevnoe >> 4) == 1 && (input >> 4) == 0)	// gia to SW4
		output=0x80;
 138:	ab 01       	movw	r20, r22
 13a:	16 c0       	rjmp	.+44     	; 0x168 <main+0xfc>
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 13c:	c9 01       	movw	r24, r18
	if ((prevnoe >> 4) == 1 && (input >> 4) == 0)	// gia to SW4
		output=0x80;
	else if ((((prevnoe >> 3) & 0x01) == 1) && (((input >> 3) & 0x01) == 0) )	// gia to SW3
		if (output==0x80) 
			output=0x02;
 13e:	ad 01       	movw	r20, r26
 140:	13 c0       	rjmp	.+38     	; 0x168 <main+0xfc>
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 142:	c9 01       	movw	r24, r18
		output=0x80;
	else if ((((prevnoe >> 3) & 0x01) == 1) && (((input >> 3) & 0x01) == 0) )	// gia to SW3
		if (output==0x80) 
			output=0x02;
		else if (output == 0x40)
			output = 0x01;
 144:	af 01       	movw	r20, r30
 146:	10 c0       	rjmp	.+32     	; 0x168 <main+0xfc>
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 148:	c9 01       	movw	r24, r18
			output = 0x01;
		else 
			output <<= 2;
	else if ((((prevnoe >> 2) & 0x01) == 1) && (((input >> 2) & 0x01) == 0))  	// gia to SW2
		if (output == 0x02)
			output = 0x80;
 14a:	ab 01       	movw	r20, r22
 14c:	0d c0       	rjmp	.+26     	; 0x168 <main+0xfc>
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 14e:	c9 01       	movw	r24, r18
			output <<= 2;
	else if ((((prevnoe >> 2) & 0x01) == 1) && (((input >> 2) & 0x01) == 0))  	// gia to SW2
		if (output == 0x02)
			output = 0x80;
		else if (output == 0x01)
			output = 0x40;
 150:	40 e4       	ldi	r20, 0x40	; 64
 152:	50 e0       	ldi	r21, 0x00	; 0
 154:	09 c0       	rjmp	.+18     	; 0x168 <main+0xfc>
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 156:	c9 01       	movw	r24, r18
			output = 0x40;
		else 
			output >>= 2;
	else if ((((prevnoe >> 1) & 0x01) == 1) && (((input >> 1) & 0x01) == 0))	// gia to SW1	
		if (output == 0x80)
			output = 0x01;
 158:	af 01       	movw	r20, r30
 15a:	06 c0       	rjmp	.+12     	; 0x168 <main+0xfc>
   while(1) {

	if (prevnoe != input ) {
		

	input &= 0x1F;		// kratame ta 5 deksiotera psifia
 15c:	c9 01       	movw	r24, r18
 15e:	04 c0       	rjmp	.+8      	; 0x168 <main+0xfc>
 160:	c9 01       	movw	r24, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <main+0xfc>
 164:	c9 01       	movw	r24, r18
			output = 0x01;
		else 
			output <<= 1;
	else if ((((prevnoe) & 0x01) == 1) && (((input) & 0x01) == 0))		// gia to SW0	
		if (output == 0x01)
			output = 0x80;
 166:	ab 01       	movw	r20, r22
		else 
	
			output >>= 1;
	
	}  
	  PORTB=output;
 168:	48 bb       	out	0x18, r20	; 24
	prevnoe=input;
	input = PIND;
 16a:	20 b3       	in	r18, 0x10	; 16
 16c:	30 e0       	ldi	r19, 0x00	; 0
	int input,prevnoe;
	input = PIND;
	prevnoe = input;
   while(1) {

	if (prevnoe != input ) {
 16e:	82 17       	cp	r24, r18
 170:	93 07       	cpc	r25, r19
 172:	09 f0       	breq	.+2      	; 0x176 <main+0x10a>
 174:	91 cf       	rjmp	.-222    	; 0x98 <main+0x2c>
 176:	f8 cf       	rjmp	.-16     	; 0x168 <main+0xfc>

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
